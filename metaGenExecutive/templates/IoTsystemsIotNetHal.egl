[%import "../epsilon/utility.eol";%]
[*
	Template for Specific Network Adapter Generator
*]

[*-Network Data Formatters*]
// Data Formatters

#include "JsonFormatter.h"
#include "XmlFormatter.h"
#include "XmiFormatter.h"

[*-Controller Networks*]
// Controller network implementation

[%for (ecu in Controller) {%]
void [%=ecu.id%]networkUploader(String data);
String [%=ecu.id%]networkDownloader();

[%}%]	

// ***

[*-Network Adapters*]
[%for (c in NetworkAdapter) {%]
/* Adapter for - [%=c.id%] */		
class [%=c.id%]NetAdapter {
	public:
	
	[*-Related Object*]
	[%=c.data.id%]* [%=c.data.id%]_ptr;
	
	[*-Uplink managers*]
	[%if (c.direction.literal == "uplink") {%]
	// Uplink
	void uplink () {
		[%if (c.coding.literal == "json") {%]
		// JSON
		String data = JsonBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
		[%if (c.coding.literal == "xml") {%]
		// XML
		String data = XmlBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
		[%if (c.coding.literal == "xmi") {%]
		// XMI
		String data = XmiBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
						
	}
	[%}%]
	[%if (c.direction.literal == "bidirectional") {%]
	// Uplink
	void uplink () {
		[%if (c.coding.literal == "json") {%]
		// JSON
		String data = JsonBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
		[%if (c.coding.literal == "xml") {%]
		// XML
		String data = XmlBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
		[%if (c.coding.literal == "xmi") {%]
		// XMI
		String data = XmiBuilder([%=c.data.id%]_ptr);
		[%=c.controller.id%]networkUploader(data);
		[%}%]
						
	}
	[%}%]
	
	[*-Downlink managers*]
	[%if (c.direction.literal == "downlink") {%]
	// Downlink
	void downlink () {
		[%if (c.coding.literal == "json") {%]
		// JSON
		String data = [%=c.controller.id%]networkDownloader();
		JsonParser(data, [%=c.data.id%]_ptr);		
		[%}%]
		[%if (c.coding.literal == "xml") {%]
		// XML
		String data = [%=c.controller.id%]networkDownloader();
		XmlParser(data, [%=c.data.id%]_ptr);
		[%}%]
		[%if (c.coding.literal == "xmi") {%]
		// XMI
		String data = [%=c.controller.id%]networkDownloader();
		XmiParser(data, [%=c.data.id%]_ptr);
		[%}%]
						
	}	
	[%}%]
	[%if (c.direction.literal == "bidirectional") {%]
	// Downlink
	void downlink () {
		[%if (c.coding.literal == "json") {%]
		// JSON
		String data = [%=c.controller.id%]networkDownloader();
		JsonParser(data, [%=c.data.id%]_ptr);		
		[%}%]
		[%if (c.coding.literal == "xml") {%]
		// XML
		String data = [%=c.controller.id%]networkDownloader();
		XmlParser(data, [%=c.data.id%]_ptr);
		[%}%]
		[%if (c.coding.literal == "xmi") {%]
		// XMI
		String data = [%=c.controller.id%]networkDownloader();
		XmiParser(data, [%=c.data.id%]_ptr);
		[%}%]
						
	}	
	[%}%]
				
};		
	
[%}%]	