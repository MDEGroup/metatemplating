/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.metaTemplating.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.metaTemplating.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaTemplatingFactoryImpl extends EFactoryImpl implements MetaTemplatingFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MetaTemplatingFactory init()
  {
    try
    {
      MetaTemplatingFactory theMetaTemplatingFactory = (MetaTemplatingFactory)EPackage.Registry.INSTANCE.getEFactory(MetaTemplatingPackage.eNS_URI);
      if (theMetaTemplatingFactory != null)
      {
        return theMetaTemplatingFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MetaTemplatingFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaTemplatingFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MetaTemplatingPackage.MODEL: return createModel();
      case MetaTemplatingPackage.HEADER: return createHeader();
      case MetaTemplatingPackage.IMPORT: return createImport();
      case MetaTemplatingPackage.LIBRARIES: return createLibraries();
      case MetaTemplatingPackage.NOTE: return createNote();
      case MetaTemplatingPackage.INSTRUCTIONS: return createInstructions();
      case MetaTemplatingPackage.STATEMENT: return createStatement();
      case MetaTemplatingPackage.META_FILTER: return createMetaFilter();
      case MetaTemplatingPackage.FILTER: return createFilter();
      case MetaTemplatingPackage.RULE: return createRule();
      case MetaTemplatingPackage.PROPERTY: return createProperty();
      case MetaTemplatingPackage.SUB_PROPERTY: return createSubProperty();
      case MetaTemplatingPackage.ITERATOR: return createIterator();
      case MetaTemplatingPackage.QUERY: return createQuery();
      case MetaTemplatingPackage.SUB_QUERY: return createSubQuery();
      case MetaTemplatingPackage.PH: return createPh();
      case MetaTemplatingPackage.META_PH: return createMetaPh();
      case MetaTemplatingPackage.PH_PROPERTY: return createPhProperty();
      case MetaTemplatingPackage.PH_SUB_PROPERTY: return createPhSubProperty();
      case MetaTemplatingPackage.PARAMETER: return createParameter();
      case MetaTemplatingPackage.SUB_PARAMETER: return createSubParameter();
      case MetaTemplatingPackage.INJECT: return createInject();
      case MetaTemplatingPackage.META_INJECT: return createMetaInject();
      case MetaTemplatingPackage.ESCAPED_STRING: return createEscapedString();
      case MetaTemplatingPackage.ESCAPED: return createEscaped();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Header createHeader()
  {
    HeaderImpl header = new HeaderImpl();
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Libraries createLibraries()
  {
    LibrariesImpl libraries = new LibrariesImpl();
    return libraries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Note createNote()
  {
    NoteImpl note = new NoteImpl();
    return note;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instructions createInstructions()
  {
    InstructionsImpl instructions = new InstructionsImpl();
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaFilter createMetaFilter()
  {
    MetaFilterImpl metaFilter = new MetaFilterImpl();
    return metaFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubProperty createSubProperty()
  {
    SubPropertyImpl subProperty = new SubPropertyImpl();
    return subProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iterator createIterator()
  {
    IteratorImpl iterator = new IteratorImpl();
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubQuery createSubQuery()
  {
    SubQueryImpl subQuery = new SubQueryImpl();
    return subQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ph createPh()
  {
    PhImpl ph = new PhImpl();
    return ph;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaPh createMetaPh()
  {
    MetaPhImpl metaPh = new MetaPhImpl();
    return metaPh;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhProperty createPhProperty()
  {
    PhPropertyImpl phProperty = new PhPropertyImpl();
    return phProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhSubProperty createPhSubProperty()
  {
    PhSubPropertyImpl phSubProperty = new PhSubPropertyImpl();
    return phSubProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubParameter createSubParameter()
  {
    SubParameterImpl subParameter = new SubParameterImpl();
    return subParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inject createInject()
  {
    InjectImpl inject = new InjectImpl();
    return inject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaInject createMetaInject()
  {
    MetaInjectImpl metaInject = new MetaInjectImpl();
    return metaInject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EscapedString createEscapedString()
  {
    EscapedStringImpl escapedString = new EscapedStringImpl();
    return escapedString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Escaped createEscaped()
  {
    EscapedImpl escaped = new EscapedImpl();
    return escaped;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaTemplatingPackage getMetaTemplatingPackage()
  {
    return (MetaTemplatingPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MetaTemplatingPackage getPackage()
  {
    return MetaTemplatingPackage.eINSTANCE;
  }

} //MetaTemplatingFactoryImpl
