/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MetaTemplatingGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentInstructionsParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Model:
		//    header=Header
		//    content+=Instructions*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//header=Header
		//content+=Instructions*
		public Group getGroup() { return cGroup; }
		
		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }
		
		//content+=Instructions*
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//Instructions
		public RuleCall getContentInstructionsParserRuleCall_1_0() { return cContentInstructionsParserRuleCall_1_0; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLibsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLibsLibrariesParserRuleCall_1_0 = (RuleCall)cLibsAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		
		///* Header */
		//Header:
		//    {Header} libs+=Libraries*
		//    imports+=Import*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header} libs+=Libraries*
		//imports+=Import*
		public Group getGroup() { return cGroup; }
		
		//{Header}
		public Action getHeaderAction_0() { return cHeaderAction_0; }
		
		//libs+=Libraries*
		public Assignment getLibsAssignment_1() { return cLibsAssignment_1; }
		
		//Libraries
		public RuleCall getLibsLibrariesParserRuleCall_1_0() { return cLibsLibrariesParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//    'import' path=STRING ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' path=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LibrariesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Libraries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Libraries:
		//    'IMPORT' path=STRING ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPORT' path=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'IMPORT'
		public Keyword getIMPORTKeyword_0() { return cIMPORTKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordIDTerminalRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		private final Keyword cAsteriskNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* Notes */
		//Note:
		//    '#*' word+=ID+ '*#'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#*' word+=ID+ '*#'
		public Group getGroup() { return cGroup; }
		
		//'#*'
		public Keyword getNumberSignAsteriskKeyword_0() { return cNumberSignAsteriskKeyword_0; }
		
		//word+=ID+
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }
		
		//ID
		public RuleCall getWordIDTerminalRuleCall_1_0() { return cWordIDTerminalRuleCall_1_0; }
		
		//'*#'
		public Keyword getAsteriskNumberSignKeyword_2() { return cAsteriskNumberSignKeyword_2; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNoteAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNoteNoteParserRuleCall_0_0 = (RuleCall)cNoteAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Assignment cFilterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFilterFilterParserRuleCall_2_0 = (RuleCall)cFilterAssignment_2.eContents().get(0);
		private final Assignment cMetaFilterAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMetaFilterMetaFilterParserRuleCall_3_0 = (RuleCall)cMetaFilterAssignment_3.eContents().get(0);
		private final Assignment cIteratorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIteratorIteratorParserRuleCall_4_0 = (RuleCall)cIteratorAssignment_4.eContents().get(0);
		private final Assignment cRuleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cRuleRuleParserRuleCall_5_0 = (RuleCall)cRuleAssignment_5.eContents().get(0);
		
		///* Instructions */
		//Instructions:
		//    note=Note |
		//    statement=Statement |
		//    filter=Filter |
		//    metaFilter=MetaFilter |
		//    iterator=Iterator |
		//    rule=Rule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//note=Note |
		//statement=Statement |
		//filter=Filter |
		//metaFilter=MetaFilter |
		//iterator=Iterator |
		//rule=Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//note=Note
		public Assignment getNoteAssignment_0() { return cNoteAssignment_0; }
		
		//Note
		public RuleCall getNoteNoteParserRuleCall_0_0() { return cNoteNoteParserRuleCall_0_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_2_0() { return cFilterFilterParserRuleCall_2_0; }
		
		//metaFilter=MetaFilter
		public Assignment getMetaFilterAssignment_3() { return cMetaFilterAssignment_3; }
		
		//MetaFilter
		public RuleCall getMetaFilterMetaFilterParserRuleCall_3_0() { return cMetaFilterMetaFilterParserRuleCall_3_0; }
		
		//iterator=Iterator
		public Assignment getIteratorAssignment_4() { return cIteratorAssignment_4; }
		
		//Iterator
		public RuleCall getIteratorIteratorParserRuleCall_4_0() { return cIteratorIteratorParserRuleCall_4_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_5() { return cRuleAssignment_5; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_5_0() { return cRuleRuleParserRuleCall_5_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cCharAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCharEscapedParserRuleCall_1_0 = (RuleCall)cCharAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringEscapedStringParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cInjectAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInjectInjectParserRuleCall_3_0 = (RuleCall)cInjectAssignment_3.eContents().get(0);
		private final Assignment cMetaInjectAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMetaInjectMetaInjectParserRuleCall_4_0 = (RuleCall)cMetaInjectAssignment_4.eContents().get(0);
		private final Assignment cPlaceholderAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cPlaceholderPhParserRuleCall_5_0 = (RuleCall)cPlaceholderAssignment_5.eContents().get(0);
		private final Assignment cMetaPlaceholderAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cMetaPlaceholderMetaPhParserRuleCall_6_0 = (RuleCall)cMetaPlaceholderAssignment_6.eContents().get(0);
		
		//Statement:
		//    text=ID | char=Escaped | string=EscapedString |
		//    inject=Inject | metaInject=MetaInject |
		//    placeholder=Ph | metaPlaceholder=MetaPh
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//text=ID | char=Escaped | string=EscapedString |
		//inject=Inject | metaInject=MetaInject |
		//placeholder=Ph | metaPlaceholder=MetaPh
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=ID
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_0_0() { return cTextIDTerminalRuleCall_0_0; }
		
		//char=Escaped
		public Assignment getCharAssignment_1() { return cCharAssignment_1; }
		
		//Escaped
		public RuleCall getCharEscapedParserRuleCall_1_0() { return cCharEscapedParserRuleCall_1_0; }
		
		//string=EscapedString
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//EscapedString
		public RuleCall getStringEscapedStringParserRuleCall_2_0() { return cStringEscapedStringParserRuleCall_2_0; }
		
		//inject=Inject
		public Assignment getInjectAssignment_3() { return cInjectAssignment_3; }
		
		//Inject
		public RuleCall getInjectInjectParserRuleCall_3_0() { return cInjectInjectParserRuleCall_3_0; }
		
		//metaInject=MetaInject
		public Assignment getMetaInjectAssignment_4() { return cMetaInjectAssignment_4; }
		
		//MetaInject
		public RuleCall getMetaInjectMetaInjectParserRuleCall_4_0() { return cMetaInjectMetaInjectParserRuleCall_4_0; }
		
		//placeholder=Ph
		public Assignment getPlaceholderAssignment_5() { return cPlaceholderAssignment_5; }
		
		//Ph
		public RuleCall getPlaceholderPhParserRuleCall_5_0() { return cPlaceholderPhParserRuleCall_5_0; }
		
		//metaPlaceholder=MetaPh
		public Assignment getMetaPlaceholderAssignment_6() { return cMetaPlaceholderAssignment_6; }
		
		//MetaPh
		public RuleCall getMetaPlaceholderMetaPhParserRuleCall_6_0() { return cMetaPlaceholderMetaPhParserRuleCall_6_0; }
	}
	public class MetaFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.MetaFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionPropertyParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTruebodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTruebodyInstructionsParserRuleCall_5_0 = (RuleCall)cTruebodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cELSEKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFalsebodyAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFalsebodyInstructionsParserRuleCall_7_2_0 = (RuleCall)cFalsebodyAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		///* Filters */
		//MetaFilter:
		//    'IF' '(' condition=Property ')' '{' truebody+=Instructions* '}' ('ELSE' '{' falsebody+=Instructions* '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' '(' condition=Property ')' '{' truebody+=Instructions* '}' ('ELSE' '{' falsebody+=Instructions* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Property
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Property
		public RuleCall getConditionPropertyParserRuleCall_2_0() { return cConditionPropertyParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//truebody+=Instructions*
		public Assignment getTruebodyAssignment_5() { return cTruebodyAssignment_5; }
		
		//Instructions
		public RuleCall getTruebodyInstructionsParserRuleCall_5_0() { return cTruebodyInstructionsParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('ELSE' '{' falsebody+=Instructions* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'ELSE'
		public Keyword getELSEKeyword_7_0() { return cELSEKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//falsebody+=Instructions*
		public Assignment getFalsebodyAssignment_7_2() { return cFalsebodyAssignment_7_2; }
		
		//Instructions
		public RuleCall getFalsebodyInstructionsParserRuleCall_7_2_0() { return cFalsebodyInstructionsParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionQueryParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTruebodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTruebodyInstructionsParserRuleCall_5_0 = (RuleCall)cTruebodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFalsebodyAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFalsebodyInstructionsParserRuleCall_7_2_0 = (RuleCall)cFalsebodyAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Filter:
		//    'if' '(' condition=Query ')' '{' truebody+=Instructions* '}' ('else' '{' falsebody+=Instructions* '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Query ')' '{' truebody+=Instructions* '}' ('else' '{' falsebody+=Instructions* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Query
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Query
		public RuleCall getConditionQueryParserRuleCall_2_0() { return cConditionQueryParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//truebody+=Instructions*
		public Assignment getTruebodyAssignment_5() { return cTruebodyAssignment_5; }
		
		//Instructions
		public RuleCall getTruebodyInstructionsParserRuleCall_5_0() { return cTruebodyInstructionsParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else' '{' falsebody+=Instructions* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//falsebody+=Instructions*
		public Assignment getFalsebodyAssignment_7_2() { return cFalsebodyAssignment_7_2; }
		
		//Instructions
		public RuleCall getFalsebodyInstructionsParserRuleCall_7_2_0() { return cFalsebodyInstructionsParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyPropertyParserRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		private final Keyword cTAGGEDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTagAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTagIDTerminalRuleCall_6_0 = (RuleCall)cTagAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyInstructionsParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///* Rules */
		//Rule:
		//    'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}'
		public Group getGroup() { return cGroup; }
		
		//'FORALL'
		public Keyword getFORALLKeyword_0() { return cFORALLKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//property=Property
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_4_0() { return cPropertyPropertyParserRuleCall_4_0; }
		
		//'TAGGED'
		public Keyword getTAGGEDKeyword_5() { return cTAGGEDKeyword_5; }
		
		//tag=ID
		public Assignment getTagAssignment_6() { return cTagAssignment_6; }
		
		//ID
		public RuleCall getTagIDTerminalRuleCall_6_0() { return cTagIDTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//body+=Instructions*
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//Instructions
		public RuleCall getBodyInstructionsParserRuleCall_9_0() { return cBodyInstructionsParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyIDTerminalRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cSubPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubPropertiesSubPropertyParserRuleCall_1_0 = (RuleCall)cSubPropertiesAssignment_1.eContents().get(0);
		
		//Property:
		//    property=ID subProperties+=SubProperty*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property=ID subProperties+=SubProperty*
		public Group getGroup() { return cGroup; }
		
		//property=ID
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_0() { return cPropertyIDTerminalRuleCall_0_0; }
		
		//subProperties+=SubProperty*
		public Assignment getSubPropertiesAssignment_1() { return cSubPropertiesAssignment_1; }
		
		//SubProperty
		public RuleCall getSubPropertiesSubPropertyParserRuleCall_1_0() { return cSubPropertiesSubPropertyParserRuleCall_1_0; }
	}
	public class SubPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.SubProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMethodAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMethodIDTerminalRuleCall_0_1_0 = (RuleCall)cMethodAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParamsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_0_3_0 = (RuleCall)cParamsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		
		//SubProperty:
		//    '.' method=ID '(' params=Parameter? ')' |
		//    '.' property=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' method=ID '(' params=Parameter? ')' |
		//'.' property=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' method=ID '(' params=Parameter? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//method=ID
		public Assignment getMethodAssignment_0_1() { return cMethodAssignment_0_1; }
		
		//ID
		public RuleCall getMethodIDTerminalRuleCall_0_1_0() { return cMethodIDTerminalRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//params=Parameter?
		public Assignment getParamsAssignment_0_3() { return cParamsAssignment_0_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_3_0() { return cParamsParameterParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'.' property=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_0() { return cPropertyIDTerminalRuleCall_1_1_0; }
	}
	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Iterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQueryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQueryQueryParserRuleCall_4_0 = (RuleCall)cQueryAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyInstructionsParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///* Iterators */
		//Iterator:
		//    'foreach' '(' element=ID 'in' query=Query ')'
		//    '{' body+=Instructions* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' '(' element=ID 'in' query=Query ')'
		//'{' body+=Instructions* '}'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//query=Query
		public Assignment getQueryAssignment_4() { return cQueryAssignment_4; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_4_0() { return cQueryQueryParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//body+=Instructions*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//Instructions
		public RuleCall getBodyInstructionsParserRuleCall_7_0() { return cBodyInstructionsParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cItemIDTerminalRuleCall_0_0_0 = (RuleCall)cItemAssignment_0_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cRefMetaPhParserRuleCall_0_1_0 = (RuleCall)cRefAssignment_0_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_0 = (RuleCall)cSubQueryAssignment_1.eContents().get(0);
		
		//Query:
		//    (item=ID | ref=MetaPh) subQuery+=SubQuery*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(item=ID | ref=MetaPh) subQuery+=SubQuery*
		public Group getGroup() { return cGroup; }
		
		//(item=ID | ref=MetaPh)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//item=ID
		public Assignment getItemAssignment_0_0() { return cItemAssignment_0_0; }
		
		//ID
		public RuleCall getItemIDTerminalRuleCall_0_0_0() { return cItemIDTerminalRuleCall_0_0_0; }
		
		//ref=MetaPh
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//MetaPh
		public RuleCall getRefMetaPhParserRuleCall_0_1_0() { return cRefMetaPhParserRuleCall_0_1_0; }
		
		//subQuery+=SubQuery*
		public Assignment getSubQueryAssignment_1() { return cSubQueryAssignment_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_0() { return cSubQuerySubQueryParserRuleCall_1_0; }
	}
	public class SubQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.SubQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cMethItemAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cMethItemIDTerminalRuleCall_0_1_0_0 = (RuleCall)cMethItemAssignment_0_1_0.eContents().get(0);
		private final Assignment cMethRefAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cMethRefMetaPhParserRuleCall_0_1_1_0 = (RuleCall)cMethRefAssignment_0_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParamsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_0_3_0 = (RuleCall)cParamsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cItemAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cItemIDTerminalRuleCall_1_1_0_0 = (RuleCall)cItemAssignment_1_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cRefMetaPhParserRuleCall_1_1_1_0 = (RuleCall)cRefAssignment_1_1_1.eContents().get(0);
		
		//SubQuery:
		//    '.' (methItem=ID | methRef=MetaPh) '(' params=Parameter? ')' |
		//    '.' (item=ID | ref=MetaPh)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' (methItem=ID | methRef=MetaPh) '(' params=Parameter? ')' |
		//'.' (item=ID | ref=MetaPh)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' (methItem=ID | methRef=MetaPh) '(' params=Parameter? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//(methItem=ID | methRef=MetaPh)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//methItem=ID
		public Assignment getMethItemAssignment_0_1_0() { return cMethItemAssignment_0_1_0; }
		
		//ID
		public RuleCall getMethItemIDTerminalRuleCall_0_1_0_0() { return cMethItemIDTerminalRuleCall_0_1_0_0; }
		
		//methRef=MetaPh
		public Assignment getMethRefAssignment_0_1_1() { return cMethRefAssignment_0_1_1; }
		
		//MetaPh
		public RuleCall getMethRefMetaPhParserRuleCall_0_1_1_0() { return cMethRefMetaPhParserRuleCall_0_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//params=Parameter?
		public Assignment getParamsAssignment_0_3() { return cParamsAssignment_0_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_3_0() { return cParamsParameterParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'.' (item=ID | ref=MetaPh)
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(item=ID | ref=MetaPh)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//item=ID
		public Assignment getItemAssignment_1_1_0() { return cItemAssignment_1_1_0; }
		
		//ID
		public RuleCall getItemIDTerminalRuleCall_1_1_0_0() { return cItemIDTerminalRuleCall_1_1_0_0; }
		
		//ref=MetaPh
		public Assignment getRefAssignment_1_1_1() { return cRefAssignment_1_1_1; }
		
		//MetaPh
		public RuleCall getRefMetaPhParserRuleCall_1_1_1_0() { return cRefMetaPhParserRuleCall_1_1_1_0; }
	}
	public class PhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Ph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPhPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* Placeholders */
		//Ph:
		//    '[[' property=PhProperty ']]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' property=PhProperty ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//property=PhProperty
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//PhProperty
		public RuleCall getPropertyPhPropertyParserRuleCall_1_0() { return cPropertyPhPropertyParserRuleCall_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_2() { return cRightSquareBracketRightSquareBracketKeyword_2; }
	}
	public class MetaPhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.MetaPh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTAGINFOKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTagAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTagIDTerminalRuleCall_2_1_0 = (RuleCall)cTagAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MetaPh:
		//    '[' property=Property ('TAGINFO' tag=ID)? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' property=Property ('TAGINFO' tag=ID)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }
		
		//('TAGINFO' tag=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'TAGINFO'
		public Keyword getTAGINFOKeyword_2_0() { return cTAGINFOKeyword_2_0; }
		
		//tag=ID
		public Assignment getTagAssignment_2_1() { return cTagAssignment_2_1; }
		
		//ID
		public RuleCall getTagIDTerminalRuleCall_2_1_0() { return cTagIDTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PhPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.PhProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyIDTerminalRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cSubPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubPropertiesPhSubPropertyParserRuleCall_1_0 = (RuleCall)cSubPropertiesAssignment_1.eContents().get(0);
		
		//PhProperty:
		//    property=ID subProperties+=PhSubProperty*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property=ID subProperties+=PhSubProperty*
		public Group getGroup() { return cGroup; }
		
		//property=ID
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_0() { return cPropertyIDTerminalRuleCall_0_0; }
		
		//subProperties+=PhSubProperty*
		public Assignment getSubPropertiesAssignment_1() { return cSubPropertiesAssignment_1; }
		
		//PhSubProperty
		public RuleCall getSubPropertiesPhSubPropertyParserRuleCall_1_0() { return cSubPropertiesPhSubPropertyParserRuleCall_1_0; }
	}
	public class PhSubPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.PhSubProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMethodAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMethodIDTerminalRuleCall_0_1_0 = (RuleCall)cMethodAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParamsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_0_3_0 = (RuleCall)cParamsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetaPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetaPropertyPropertyParserRuleCall_2_1_0 = (RuleCall)cMetaPropertyAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PhSubProperty:
		//    '.' method=ID '(' params=Parameter? ')' |
		//    '.' property=ID |
		//    '.{' metaProperty=Property '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' method=ID '(' params=Parameter? ')' |
		//'.' property=ID |
		//'.{' metaProperty=Property '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' method=ID '(' params=Parameter? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//method=ID
		public Assignment getMethodAssignment_0_1() { return cMethodAssignment_0_1; }
		
		//ID
		public RuleCall getMethodIDTerminalRuleCall_0_1_0() { return cMethodIDTerminalRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//params=Parameter?
		public Assignment getParamsAssignment_0_3() { return cParamsAssignment_0_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_3_0() { return cParamsParameterParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'.' property=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_0() { return cPropertyIDTerminalRuleCall_1_1_0; }
		
		//'.{' metaProperty=Property '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//'.{'
		public Keyword getFullStopLeftCurlyBracketKeyword_2_0() { return cFullStopLeftCurlyBracketKeyword_2_0; }
		
		//metaProperty=Property
		public Assignment getMetaPropertyAssignment_2_1() { return cMetaPropertyAssignment_2_1; }
		
		//Property
		public RuleCall getMetaPropertyPropertyParserRuleCall_2_1_0() { return cMetaPropertyPropertyParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParIDTerminalRuleCall_0_0 = (RuleCall)cParAssignment_0.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsSubParameterParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		///* Parameters */
		//Parameter:
		//    par=ID params+=SubParameter*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//par=ID params+=SubParameter*
		public Group getGroup() { return cGroup; }
		
		//par=ID
		public Assignment getParAssignment_0() { return cParAssignment_0; }
		
		//ID
		public RuleCall getParIDTerminalRuleCall_0_0() { return cParIDTerminalRuleCall_0_0; }
		
		//params+=SubParameter*
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//SubParameter
		public RuleCall getParamsSubParameterParserRuleCall_1_0() { return cParamsSubParameterParserRuleCall_1_0; }
	}
	public class SubParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.SubParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParIDTerminalRuleCall_1_0 = (RuleCall)cParAssignment_1.eContents().get(0);
		
		//SubParameter:
		//    ',' par=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//',' par=ID
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//par=ID
		public Assignment getParAssignment_1() { return cParAssignment_1; }
		
		//ID
		public RuleCall getParIDTerminalRuleCall_1_0() { return cParIDTerminalRuleCall_1_0; }
	}
	public class InjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Inject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* Inject */
		//Inject:
		//    '@[['code=STRING']]@'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@[['code=STRING']]@'
		public Group getGroup() { return cGroup; }
		
		//'@[['
		public Keyword getCommercialAtLeftSquareBracketLeftSquareBracketKeyword_0() { return cCommercialAtLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//code=STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }
		
		//']]@'
		public Keyword getRightSquareBracketRightSquareBracketCommercialAtKeyword_2() { return cRightSquareBracketRightSquareBracketCommercialAtKeyword_2; }
	}
	public class MetaInjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.MetaInject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MetaInject:
		//    '@['code=STRING']@'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@['code=STRING']@'
		public Group getGroup() { return cGroup; }
		
		//'@['
		public Keyword getCommercialAtLeftSquareBracketKeyword_0() { return cCommercialAtLeftSquareBracketKeyword_0; }
		
		//code=STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }
		
		//']@'
		public Keyword getRightSquareBracketCommercialAtKeyword_2() { return cRightSquareBracketCommercialAtKeyword_2; }
	}
	public class EscapedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.EscapedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* Escaping */
		//EscapedString:
		//    '@{' str=STRING '}@'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@{' str=STRING '}@'
		public Group getGroup() { return cGroup; }
		
		//'@{'
		public Keyword getCommercialAtLeftCurlyBracketKeyword_0() { return cCommercialAtLeftCurlyBracketKeyword_0; }
		
		//str=STRING
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_0() { return cStrSTRINGTerminalRuleCall_1_0; }
		
		//'}@'
		public Keyword getRightCurlyBracketCommercialAtKeyword_2() { return cRightCurlyBracketCommercialAtKeyword_2; }
	}
	public class EscapedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Escaped");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCharAlternatives_1_0 = (Alternatives)cCharAssignment_1.eContents().get(0);
		private final Keyword cCharNKeyword_1_0_0 = (Keyword)cCharAlternatives_1_0.eContents().get(0);
		private final Keyword cCharSKeyword_1_0_1 = (Keyword)cCharAlternatives_1_0.eContents().get(1);
		private final Keyword cCharTKeyword_1_0_2 = (Keyword)cCharAlternatives_1_0.eContents().get(2);
		private final Keyword cCharNumberSignKeyword_1_0_3 = (Keyword)cCharAlternatives_1_0.eContents().get(3);
		private final Keyword cCharLeftCurlyBracketKeyword_1_0_4 = (Keyword)cCharAlternatives_1_0.eContents().get(4);
		private final Keyword cCharRightCurlyBracketKeyword_1_0_5 = (Keyword)cCharAlternatives_1_0.eContents().get(5);
		private final Keyword cCharLeftSquareBracketKeyword_1_0_6 = (Keyword)cCharAlternatives_1_0.eContents().get(6);
		private final Keyword cCharRightSquareBracketKeyword_1_0_7 = (Keyword)cCharAlternatives_1_0.eContents().get(7);
		private final Keyword cCharCommaKeyword_1_0_8 = (Keyword)cCharAlternatives_1_0.eContents().get(8);
		private final Keyword cCharFullStopKeyword_1_0_9 = (Keyword)cCharAlternatives_1_0.eContents().get(9);
		private final Keyword cCharSemicolonKeyword_1_0_10 = (Keyword)cCharAlternatives_1_0.eContents().get(10);
		private final Keyword cCharLeftParenthesisKeyword_1_0_11 = (Keyword)cCharAlternatives_1_0.eContents().get(11);
		private final Keyword cCharRightParenthesisKeyword_1_0_12 = (Keyword)cCharAlternatives_1_0.eContents().get(12);
		private final Keyword cCharColonKeyword_1_0_13 = (Keyword)cCharAlternatives_1_0.eContents().get(13);
		private final Keyword cCharLessThanSignKeyword_1_0_14 = (Keyword)cCharAlternatives_1_0.eContents().get(14);
		private final Keyword cCharGreaterThanSignKeyword_1_0_15 = (Keyword)cCharAlternatives_1_0.eContents().get(15);
		private final Keyword cCharApostropheKeyword_1_0_16 = (Keyword)cCharAlternatives_1_0.eContents().get(16);
		
		//Escaped:
		//    '#' char=('n' | 's' | 't' | '#' | '{' | '}' | '[' | ']' | ',' | '.' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' char=('n' | 's' | 't' | '#' | '{' | '}' | '[' | ']' | ',' | '.' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//char=('n' | 's' | 't' | '#' | '{' | '}' | '[' | ']' | ',' | '.' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Assignment getCharAssignment_1() { return cCharAssignment_1; }
		
		//('n' | 's' | 't' | '#' | '{' | '}' | '[' | ']' | ',' | '.' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Alternatives getCharAlternatives_1_0() { return cCharAlternatives_1_0; }
		
		//'n'
		public Keyword getCharNKeyword_1_0_0() { return cCharNKeyword_1_0_0; }
		
		//'s'
		public Keyword getCharSKeyword_1_0_1() { return cCharSKeyword_1_0_1; }
		
		//'t'
		public Keyword getCharTKeyword_1_0_2() { return cCharTKeyword_1_0_2; }
		
		//'#'
		public Keyword getCharNumberSignKeyword_1_0_3() { return cCharNumberSignKeyword_1_0_3; }
		
		//'{'
		public Keyword getCharLeftCurlyBracketKeyword_1_0_4() { return cCharLeftCurlyBracketKeyword_1_0_4; }
		
		//'}'
		public Keyword getCharRightCurlyBracketKeyword_1_0_5() { return cCharRightCurlyBracketKeyword_1_0_5; }
		
		//'['
		public Keyword getCharLeftSquareBracketKeyword_1_0_6() { return cCharLeftSquareBracketKeyword_1_0_6; }
		
		//']'
		public Keyword getCharRightSquareBracketKeyword_1_0_7() { return cCharRightSquareBracketKeyword_1_0_7; }
		
		//','
		public Keyword getCharCommaKeyword_1_0_8() { return cCharCommaKeyword_1_0_8; }
		
		//'.'
		public Keyword getCharFullStopKeyword_1_0_9() { return cCharFullStopKeyword_1_0_9; }
		
		//';'
		public Keyword getCharSemicolonKeyword_1_0_10() { return cCharSemicolonKeyword_1_0_10; }
		
		//'('
		public Keyword getCharLeftParenthesisKeyword_1_0_11() { return cCharLeftParenthesisKeyword_1_0_11; }
		
		//')'
		public Keyword getCharRightParenthesisKeyword_1_0_12() { return cCharRightParenthesisKeyword_1_0_12; }
		
		//':'
		public Keyword getCharColonKeyword_1_0_13() { return cCharColonKeyword_1_0_13; }
		
		//'<'
		public Keyword getCharLessThanSignKeyword_1_0_14() { return cCharLessThanSignKeyword_1_0_14; }
		
		//'>'
		public Keyword getCharGreaterThanSignKeyword_1_0_15() { return cCharGreaterThanSignKeyword_1_0_15; }
		
		//"'"
		public Keyword getCharApostropheKeyword_1_0_16() { return cCharApostropheKeyword_1_0_16; }
	}
	
	
	private final ModelElements pModel;
	private final HeaderElements pHeader;
	private final ImportElements pImport;
	private final LibrariesElements pLibraries;
	private final NoteElements pNote;
	private final InstructionsElements pInstructions;
	private final StatementElements pStatement;
	private final MetaFilterElements pMetaFilter;
	private final FilterElements pFilter;
	private final RuleElements pRule;
	private final PropertyElements pProperty;
	private final SubPropertyElements pSubProperty;
	private final IteratorElements pIterator;
	private final QueryElements pQuery;
	private final SubQueryElements pSubQuery;
	private final PhElements pPh;
	private final MetaPhElements pMetaPh;
	private final PhPropertyElements pPhProperty;
	private final PhSubPropertyElements pPhSubProperty;
	private final ParameterElements pParameter;
	private final SubParameterElements pSubParameter;
	private final InjectElements pInject;
	private final MetaInjectElements pMetaInject;
	private final EscapedStringElements pEscapedString;
	private final EscapedElements pEscaped;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetaTemplatingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHeader = new HeaderElements();
		this.pImport = new ImportElements();
		this.pLibraries = new LibrariesElements();
		this.pNote = new NoteElements();
		this.pInstructions = new InstructionsElements();
		this.pStatement = new StatementElements();
		this.pMetaFilter = new MetaFilterElements();
		this.pFilter = new FilterElements();
		this.pRule = new RuleElements();
		this.pProperty = new PropertyElements();
		this.pSubProperty = new SubPropertyElements();
		this.pIterator = new IteratorElements();
		this.pQuery = new QueryElements();
		this.pSubQuery = new SubQueryElements();
		this.pPh = new PhElements();
		this.pMetaPh = new MetaPhElements();
		this.pPhProperty = new PhPropertyElements();
		this.pPhSubProperty = new PhSubPropertyElements();
		this.pParameter = new ParameterElements();
		this.pSubParameter = new SubParameterElements();
		this.pInject = new InjectElements();
		this.pMetaInject = new MetaInjectElements();
		this.pEscapedString = new EscapedStringElements();
		this.pEscaped = new EscapedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MetaTemplating".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    header=Header
	//    content+=Instructions*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///* Header */
	//Header:
	//    {Header} libs+=Libraries*
	//    imports+=Import*
	//;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Import:
	//    'import' path=STRING ';'
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Libraries:
	//    'IMPORT' path=STRING ';'
	//;
	public LibrariesElements getLibrariesAccess() {
		return pLibraries;
	}
	
	public ParserRule getLibrariesRule() {
		return getLibrariesAccess().getRule();
	}
	
	///* Notes */
	//Note:
	//    '#*' word+=ID+ '*#'
	//;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}
	
	///* Instructions */
	//Instructions:
	//    note=Note |
	//    statement=Statement |
	//    filter=Filter |
	//    metaFilter=MetaFilter |
	//    iterator=Iterator |
	//    rule=Rule
	//;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//Statement:
	//    text=ID | char=Escaped | string=EscapedString |
	//    inject=Inject | metaInject=MetaInject |
	//    placeholder=Ph | metaPlaceholder=MetaPh
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	///* Filters */
	//MetaFilter:
	//    'IF' '(' condition=Property ')' '{' truebody+=Instructions* '}' ('ELSE' '{' falsebody+=Instructions* '}' )?
	//;
	public MetaFilterElements getMetaFilterAccess() {
		return pMetaFilter;
	}
	
	public ParserRule getMetaFilterRule() {
		return getMetaFilterAccess().getRule();
	}
	
	//Filter:
	//    'if' '(' condition=Query ')' '{' truebody+=Instructions* '}' ('else' '{' falsebody+=Instructions* '}' )?
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	///* Rules */
	//Rule:
	//    'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}'
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Property:
	//    property=ID subProperties+=SubProperty*
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//SubProperty:
	//    '.' method=ID '(' params=Parameter? ')' |
	//    '.' property=ID
	//;
	public SubPropertyElements getSubPropertyAccess() {
		return pSubProperty;
	}
	
	public ParserRule getSubPropertyRule() {
		return getSubPropertyAccess().getRule();
	}
	
	///* Iterators */
	//Iterator:
	//    'foreach' '(' element=ID 'in' query=Query ')'
	//    '{' body+=Instructions* '}'
	//;
	public IteratorElements getIteratorAccess() {
		return pIterator;
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}
	
	//Query:
	//    (item=ID | ref=MetaPh) subQuery+=SubQuery*
	//;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//SubQuery:
	//    '.' (methItem=ID | methRef=MetaPh) '(' params=Parameter? ')' |
	//    '.' (item=ID | ref=MetaPh)
	//;
	public SubQueryElements getSubQueryAccess() {
		return pSubQuery;
	}
	
	public ParserRule getSubQueryRule() {
		return getSubQueryAccess().getRule();
	}
	
	///* Placeholders */
	//Ph:
	//    '[[' property=PhProperty ']]'
	//;
	public PhElements getPhAccess() {
		return pPh;
	}
	
	public ParserRule getPhRule() {
		return getPhAccess().getRule();
	}
	
	//MetaPh:
	//    '[' property=Property ('TAGINFO' tag=ID)? ']'
	//;
	public MetaPhElements getMetaPhAccess() {
		return pMetaPh;
	}
	
	public ParserRule getMetaPhRule() {
		return getMetaPhAccess().getRule();
	}
	
	//PhProperty:
	//    property=ID subProperties+=PhSubProperty*
	//;
	public PhPropertyElements getPhPropertyAccess() {
		return pPhProperty;
	}
	
	public ParserRule getPhPropertyRule() {
		return getPhPropertyAccess().getRule();
	}
	
	//PhSubProperty:
	//    '.' method=ID '(' params=Parameter? ')' |
	//    '.' property=ID |
	//    '.{' metaProperty=Property '}'
	//;
	public PhSubPropertyElements getPhSubPropertyAccess() {
		return pPhSubProperty;
	}
	
	public ParserRule getPhSubPropertyRule() {
		return getPhSubPropertyAccess().getRule();
	}
	
	///* Parameters */
	//Parameter:
	//    par=ID params+=SubParameter*
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//SubParameter:
	//    ',' par=ID
	//;
	public SubParameterElements getSubParameterAccess() {
		return pSubParameter;
	}
	
	public ParserRule getSubParameterRule() {
		return getSubParameterAccess().getRule();
	}
	
	///* Inject */
	//Inject:
	//    '@[['code=STRING']]@'
	//;
	public InjectElements getInjectAccess() {
		return pInject;
	}
	
	public ParserRule getInjectRule() {
		return getInjectAccess().getRule();
	}
	
	//MetaInject:
	//    '@['code=STRING']@'
	//;
	public MetaInjectElements getMetaInjectAccess() {
		return pMetaInject;
	}
	
	public ParserRule getMetaInjectRule() {
		return getMetaInjectAccess().getRule();
	}
	
	///* Escaping */
	//EscapedString:
	//    '@{' str=STRING '}@'
	//;
	public EscapedStringElements getEscapedStringAccess() {
		return pEscapedString;
	}
	
	public ParserRule getEscapedStringRule() {
		return getEscapedStringAccess().getRule();
	}
	
	//Escaped:
	//    '#' char=('n' | 's' | 't' | '#' | '{' | '}' | '[' | ']' | ',' | '.' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
	//;
	public EscapedElements getEscapedAccess() {
		return pEscaped;
	}
	
	public ParserRule getEscapedRule() {
		return getEscapedAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
