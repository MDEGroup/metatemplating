/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MetaTemplatingGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeaderHeaderParserRuleCall_0_0 = (RuleCall)cHeaderAssignment_0.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentInstructionsParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Model:
		//	header=Header
		//	content+=Instructions*;
		@Override public ParserRule getRule() { return rule; }
		
		//header=Header
		//content+=Instructions*
		public Group getGroup() { return cGroup; }
		
		//header=Header
		public Assignment getHeaderAssignment_0() { return cHeaderAssignment_0; }
		
		//Header
		public RuleCall getHeaderHeaderParserRuleCall_0_0() { return cHeaderHeaderParserRuleCall_0_0; }
		
		//content+=Instructions*
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//Instructions
		public RuleCall getContentInstructionsParserRuleCall_1_0() { return cContentInstructionsParserRuleCall_1_0; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLibsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLibsLibrariesParserRuleCall_1_0 = (RuleCall)cLibsAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		
		///* Header */
		//Header:
		//	{Header} libs+=Libraries*
		//	imports+=Import*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Header} libs+=Libraries*
		//imports+=Import*
		public Group getGroup() { return cGroup; }
		
		//{Header}
		public Action getHeaderAction_0() { return cHeaderAction_0; }
		
		//libs+=Libraries*
		public Assignment getLibsAssignment_1() { return cLibsAssignment_1; }
		
		//Libraries
		public RuleCall getLibsLibrariesParserRuleCall_1_0() { return cLibsLibrariesParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' path=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' path=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LibrariesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Libraries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Libraries:
		//	'IMPORT' path=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPORT' path=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'IMPORT'
		public Keyword getIMPORTKeyword_0() { return cIMPORTKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Comment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cWordAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cWordIDTerminalRuleCall_0_1_0 = (RuleCall)cWordAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordIDTerminalRuleCall_1_1_0 = (RuleCall)cWordAssignment_1_1.eContents().get(0);
		private final Keyword cAsteriskSolidusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		///* Comments */
		//Comment:
		//	'//' word+=ID |
		//	'/*' word+=ID '*/';
		@Override public ParserRule getRule() { return rule; }
		
		//'//' word+=ID |
		//'/*' word+=ID '*/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'//' word+=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'//'
		public Keyword getSolidusSolidusKeyword_0_0() { return cSolidusSolidusKeyword_0_0; }
		
		//word+=ID
		public Assignment getWordAssignment_0_1() { return cWordAssignment_0_1; }
		
		//ID
		public RuleCall getWordIDTerminalRuleCall_0_1_0() { return cWordIDTerminalRuleCall_0_1_0; }
		
		//'/*' word+=ID '*/'
		public Group getGroup_1() { return cGroup_1; }
		
		//'/*'
		public Keyword getSolidusAsteriskKeyword_1_0() { return cSolidusAsteriskKeyword_1_0; }
		
		//word+=ID
		public Assignment getWordAssignment_1_1() { return cWordAssignment_1_1; }
		
		//ID
		public RuleCall getWordIDTerminalRuleCall_1_1_0() { return cWordIDTerminalRuleCall_1_1_0; }
		
		//'*/'
		public Keyword getAsteriskSolidusKeyword_1_2() { return cAsteriskSolidusKeyword_1_2; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cIteratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIteratorIteratorParserRuleCall_1_0 = (RuleCall)cIteratorAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRuleRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCommentCommentParserRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		///* Instructions */
		//Instructions:
		//	statement=Statement | iterator=Iterator | rule=Rule | comment=Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//statement=Statement | iterator=Iterator | rule=Rule | comment=Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statement=Statement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_0_0() { return cStatementStatementParserRuleCall_0_0; }
		
		//iterator=Iterator
		public Assignment getIteratorAssignment_1() { return cIteratorAssignment_1; }
		
		//Iterator
		public RuleCall getIteratorIteratorParserRuleCall_1_0() { return cIteratorIteratorParserRuleCall_1_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_2_0() { return cRuleRuleParserRuleCall_2_0; }
		
		//comment=Comment
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }
		
		//Comment
		public RuleCall getCommentCommentParserRuleCall_3_0() { return cCommentCommentParserRuleCall_3_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cCharAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCharEscapedParserRuleCall_1_0 = (RuleCall)cCharAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringEscapedStringParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cPlaceholderAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPlaceholderPhParserRuleCall_3_0 = (RuleCall)cPlaceholderAssignment_3.eContents().get(0);
		private final Assignment cMetaPlaceholderAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMetaPlaceholderMetaPhParserRuleCall_4_0 = (RuleCall)cMetaPlaceholderAssignment_4.eContents().get(0);
		
		//Statement:
		//	text=ID | char=Escaped | string=EscapedString | placeholder=Ph | metaPlaceholder=MetaPh;
		@Override public ParserRule getRule() { return rule; }
		
		//text=ID | char=Escaped | string=EscapedString | placeholder=Ph | metaPlaceholder=MetaPh
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=ID
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_0_0() { return cTextIDTerminalRuleCall_0_0; }
		
		//char=Escaped
		public Assignment getCharAssignment_1() { return cCharAssignment_1; }
		
		//Escaped
		public RuleCall getCharEscapedParserRuleCall_1_0() { return cCharEscapedParserRuleCall_1_0; }
		
		//string=EscapedString
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//EscapedString
		public RuleCall getStringEscapedStringParserRuleCall_2_0() { return cStringEscapedStringParserRuleCall_2_0; }
		
		//placeholder=Ph
		public Assignment getPlaceholderAssignment_3() { return cPlaceholderAssignment_3; }
		
		//Ph
		public RuleCall getPlaceholderPhParserRuleCall_3_0() { return cPlaceholderPhParserRuleCall_3_0; }
		
		//metaPlaceholder=MetaPh
		public Assignment getMetaPlaceholderAssignment_4() { return cMetaPlaceholderAssignment_4; }
		
		//MetaPh
		public RuleCall getMetaPlaceholderMetaPhParserRuleCall_4_0() { return cMetaPlaceholderMetaPhParserRuleCall_4_0; }
	}
	public class PhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Ph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_0_1_0 = (RuleCall)cPropertyAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Assignment cMetaPropertyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMetaPropertyMetaPropertyParserRuleCall_1_2_0 = (RuleCall)cMetaPropertyAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Ph:
		//	'[[' property=Property ']]' |
		//	'[[' property=Property metaProperty=MetaProperty ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' property=Property ']]' |
		//'[[' property=Property metaProperty=MetaProperty ']]'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[[' property=Property ']]'
		public Group getGroup_0() { return cGroup_0; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_0_1() { return cPropertyAssignment_0_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_0_1_0() { return cPropertyPropertyParserRuleCall_0_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_0_2() { return cRightSquareBracketRightSquareBracketKeyword_0_2; }
		
		//'[[' property=Property metaProperty=MetaProperty ']]'
		public Group getGroup_1() { return cGroup_1; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketLeftSquareBracketKeyword_1_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_1_0() { return cPropertyPropertyParserRuleCall_1_1_0; }
		
		//metaProperty=MetaProperty
		public Assignment getMetaPropertyAssignment_1_2() { return cMetaPropertyAssignment_1_2; }
		
		//MetaProperty
		public RuleCall getMetaPropertyMetaPropertyParserRuleCall_1_2_0() { return cMetaPropertyMetaPropertyParserRuleCall_1_2_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_1_3() { return cRightSquareBracketRightSquareBracketKeyword_1_3; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORALLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyPropertyParserRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		private final Keyword cTAGGEDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTagAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTagIDTerminalRuleCall_6_0 = (RuleCall)cTagAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyInstructionsParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///* Rules */
		//Rule:
		//	'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}'
		public Group getGroup() { return cGroup; }
		
		//'FORALL'
		public Keyword getFORALLKeyword_0() { return cFORALLKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//property=Property
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_4_0() { return cPropertyPropertyParserRuleCall_4_0; }
		
		//'TAGGED'
		public Keyword getTAGGEDKeyword_5() { return cTAGGEDKeyword_5; }
		
		//tag=ID
		public Assignment getTagAssignment_6() { return cTagAssignment_6; }
		
		//ID
		public RuleCall getTagIDTerminalRuleCall_6_0() { return cTagIDTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//body+=Instructions*
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//Instructions
		public RuleCall getBodyInstructionsParserRuleCall_9_0() { return cBodyInstructionsParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Iterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetaElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetaElementMetaPhParserRuleCall_4_0 = (RuleCall)cMetaElementAssignment_4.eContents().get(0);
		private final Assignment cSubPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubPropertiesSubPropertyParserRuleCall_5_0 = (RuleCall)cSubPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyInstructionsParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///* Iterators */
		//Iterator:
		//	'foreach' '(' element=ID 'in' metaElement=MetaPh subProperties+=SubProperty* ')'
		//	'{' body+=Instructions* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' '(' element=ID 'in' metaElement=MetaPh subProperties+=SubProperty* ')'
		//'{' body+=Instructions* '}'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//metaElement=MetaPh
		public Assignment getMetaElementAssignment_4() { return cMetaElementAssignment_4; }
		
		//MetaPh
		public RuleCall getMetaElementMetaPhParserRuleCall_4_0() { return cMetaElementMetaPhParserRuleCall_4_0; }
		
		//subProperties+=SubProperty*
		public Assignment getSubPropertiesAssignment_5() { return cSubPropertiesAssignment_5; }
		
		//SubProperty
		public RuleCall getSubPropertiesSubPropertyParserRuleCall_5_0() { return cSubPropertiesSubPropertyParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//body+=Instructions*
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Instructions
		public RuleCall getBodyInstructionsParserRuleCall_8_0() { return cBodyInstructionsParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MetaPhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.MetaPh");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_0_1_0 = (RuleCall)cPropertyAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Assignment cInfoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInfoTagInfoParserRuleCall_1_2_0 = (RuleCall)cInfoAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///* Placeholder */
		//MetaPh:
		//	'[' property=Property ']' |
		//	'[' property=Property info=TagInfo ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' property=Property ']' |
		//'[' property=Property info=TagInfo ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' property=Property ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_0_1() { return cPropertyAssignment_0_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_0_1_0() { return cPropertyPropertyParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'[' property=Property info=TagInfo ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_1_0() { return cPropertyPropertyParserRuleCall_1_1_0; }
		
		//info=TagInfo
		public Assignment getInfoAssignment_1_2() { return cInfoAssignment_1_2; }
		
		//TagInfo
		public RuleCall getInfoTagInfoParserRuleCall_1_2_0() { return cInfoTagInfoParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class TagInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.TagInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTAGINFOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagSTRINGTerminalRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//TagInfo:
		//	'TAGINFO' tag=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'TAGINFO' tag=STRING
		public Group getGroup() { return cGroup; }
		
		//'TAGINFO'
		public Keyword getTAGINFOKeyword_0() { return cTAGINFOKeyword_0; }
		
		//tag=STRING
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//STRING
		public RuleCall getTagSTRINGTerminalRuleCall_1_0() { return cTagSTRINGTerminalRuleCall_1_0; }
	}
	public class MetaPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.MetaProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MetaProperty:
		//	'.{' property=Property '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'.{' property=Property '}'
		public Group getGroup() { return cGroup; }
		
		//'.{'
		public Keyword getFullStopLeftCurlyBracketKeyword_0() { return cFullStopLeftCurlyBracketKeyword_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyIDTerminalRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cSubPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubPropertiesSubPropertyParserRuleCall_1_0 = (RuleCall)cSubPropertiesAssignment_1.eContents().get(0);
		
		///* Properties */
		//Property:
		//	property=ID subProperties+=SubProperty*;
		@Override public ParserRule getRule() { return rule; }
		
		//property=ID subProperties+=SubProperty*
		public Group getGroup() { return cGroup; }
		
		//property=ID
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_0() { return cPropertyIDTerminalRuleCall_0_0; }
		
		//subProperties+=SubProperty*
		public Assignment getSubPropertiesAssignment_1() { return cSubPropertiesAssignment_1; }
		
		//SubProperty
		public RuleCall getSubPropertiesSubPropertyParserRuleCall_1_0() { return cSubPropertiesSubPropertyParserRuleCall_1_0; }
	}
	public class SubPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.SubProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_0_1_0 = (RuleCall)cPropertyAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SubProperty:
		//	'.' property=ID |
		//	'.' property=ID '()';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' property=ID |
		//'.' property=ID '()'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' property=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_0_1() { return cPropertyAssignment_0_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_0_1_0() { return cPropertyIDTerminalRuleCall_0_1_0; }
		
		//'.' property=ID '()'
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_0() { return cPropertyIDTerminalRuleCall_1_1_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_2() { return cLeftParenthesisRightParenthesisKeyword_1_2; }
	}
	public class EscapedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.EscapedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EscapedString:
		//	'@{' str=STRING '}@';
		@Override public ParserRule getRule() { return rule; }
		
		//'@{' str=STRING '}@'
		public Group getGroup() { return cGroup; }
		
		//'@{'
		public Keyword getCommercialAtLeftCurlyBracketKeyword_0() { return cCommercialAtLeftCurlyBracketKeyword_0; }
		
		//str=STRING
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_0() { return cStrSTRINGTerminalRuleCall_1_0; }
		
		//'}@'
		public Keyword getRightCurlyBracketCommercialAtKeyword_2() { return cRightCurlyBracketCommercialAtKeyword_2; }
	}
	public class EscapedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MetaTemplating.Escaped");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCharAlternatives_1_0 = (Alternatives)cCharAssignment_1.eContents().get(0);
		private final Keyword cCharNumberSignKeyword_1_0_0 = (Keyword)cCharAlternatives_1_0.eContents().get(0);
		private final Keyword cCharLeftCurlyBracketKeyword_1_0_1 = (Keyword)cCharAlternatives_1_0.eContents().get(1);
		private final Keyword cCharRightCurlyBracketKeyword_1_0_2 = (Keyword)cCharAlternatives_1_0.eContents().get(2);
		private final Keyword cCharLeftSquareBracketKeyword_1_0_3 = (Keyword)cCharAlternatives_1_0.eContents().get(3);
		private final Keyword cCharRightSquareBracketKeyword_1_0_4 = (Keyword)cCharAlternatives_1_0.eContents().get(4);
		private final Keyword cCharCommaKeyword_1_0_5 = (Keyword)cCharAlternatives_1_0.eContents().get(5);
		private final Keyword cCharSemicolonKeyword_1_0_6 = (Keyword)cCharAlternatives_1_0.eContents().get(6);
		private final Keyword cCharLeftParenthesisKeyword_1_0_7 = (Keyword)cCharAlternatives_1_0.eContents().get(7);
		private final Keyword cCharRightParenthesisKeyword_1_0_8 = (Keyword)cCharAlternatives_1_0.eContents().get(8);
		private final Keyword cCharColonKeyword_1_0_9 = (Keyword)cCharAlternatives_1_0.eContents().get(9);
		private final Keyword cCharLessThanSignKeyword_1_0_10 = (Keyword)cCharAlternatives_1_0.eContents().get(10);
		private final Keyword cCharGreaterThanSignKeyword_1_0_11 = (Keyword)cCharAlternatives_1_0.eContents().get(11);
		private final Keyword cCharApostropheKeyword_1_0_12 = (Keyword)cCharAlternatives_1_0.eContents().get(12);
		
		//Escaped:
		//	'#' char=('#' | '{' | '}' | '[' | ']' | ',' | ';' | '(' | ')' | ':' | '<' | '>' | "'");
		@Override public ParserRule getRule() { return rule; }
		
		//'#' char=('#' | '{' | '}' | '[' | ']' | ',' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//char=('#' | '{' | '}' | '[' | ']' | ',' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Assignment getCharAssignment_1() { return cCharAssignment_1; }
		
		//('#' | '{' | '}' | '[' | ']' | ',' | ';' | '(' | ')' | ':' | '<' | '>' | "'")
		public Alternatives getCharAlternatives_1_0() { return cCharAlternatives_1_0; }
		
		//'#'
		public Keyword getCharNumberSignKeyword_1_0_0() { return cCharNumberSignKeyword_1_0_0; }
		
		//'{'
		public Keyword getCharLeftCurlyBracketKeyword_1_0_1() { return cCharLeftCurlyBracketKeyword_1_0_1; }
		
		//'}'
		public Keyword getCharRightCurlyBracketKeyword_1_0_2() { return cCharRightCurlyBracketKeyword_1_0_2; }
		
		//'['
		public Keyword getCharLeftSquareBracketKeyword_1_0_3() { return cCharLeftSquareBracketKeyword_1_0_3; }
		
		//']'
		public Keyword getCharRightSquareBracketKeyword_1_0_4() { return cCharRightSquareBracketKeyword_1_0_4; }
		
		//','
		public Keyword getCharCommaKeyword_1_0_5() { return cCharCommaKeyword_1_0_5; }
		
		//';'
		public Keyword getCharSemicolonKeyword_1_0_6() { return cCharSemicolonKeyword_1_0_6; }
		
		//'('
		public Keyword getCharLeftParenthesisKeyword_1_0_7() { return cCharLeftParenthesisKeyword_1_0_7; }
		
		//')'
		public Keyword getCharRightParenthesisKeyword_1_0_8() { return cCharRightParenthesisKeyword_1_0_8; }
		
		//':'
		public Keyword getCharColonKeyword_1_0_9() { return cCharColonKeyword_1_0_9; }
		
		//'<'
		public Keyword getCharLessThanSignKeyword_1_0_10() { return cCharLessThanSignKeyword_1_0_10; }
		
		//'>'
		public Keyword getCharGreaterThanSignKeyword_1_0_11() { return cCharGreaterThanSignKeyword_1_0_11; }
		
		//"'"
		public Keyword getCharApostropheKeyword_1_0_12() { return cCharApostropheKeyword_1_0_12; }
	}
	
	
	private final ModelElements pModel;
	private final HeaderElements pHeader;
	private final ImportElements pImport;
	private final LibrariesElements pLibraries;
	private final CommentElements pComment;
	private final InstructionsElements pInstructions;
	private final StatementElements pStatement;
	private final PhElements pPh;
	private final RuleElements pRule;
	private final IteratorElements pIterator;
	private final MetaPhElements pMetaPh;
	private final TagInfoElements pTagInfo;
	private final MetaPropertyElements pMetaProperty;
	private final PropertyElements pProperty;
	private final SubPropertyElements pSubProperty;
	private final EscapedStringElements pEscapedString;
	private final EscapedElements pEscaped;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetaTemplatingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHeader = new HeaderElements();
		this.pImport = new ImportElements();
		this.pLibraries = new LibrariesElements();
		this.pComment = new CommentElements();
		this.pInstructions = new InstructionsElements();
		this.pStatement = new StatementElements();
		this.pPh = new PhElements();
		this.pRule = new RuleElements();
		this.pIterator = new IteratorElements();
		this.pMetaPh = new MetaPhElements();
		this.pTagInfo = new TagInfoElements();
		this.pMetaProperty = new MetaPropertyElements();
		this.pProperty = new PropertyElements();
		this.pSubProperty = new SubPropertyElements();
		this.pEscapedString = new EscapedStringElements();
		this.pEscaped = new EscapedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MetaTemplating".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	header=Header
	//	content+=Instructions*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///* Header */
	//Header:
	//	{Header} libs+=Libraries*
	//	imports+=Import*;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//Import:
	//	'import' path=STRING ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Libraries:
	//	'IMPORT' path=STRING ';';
	public LibrariesElements getLibrariesAccess() {
		return pLibraries;
	}
	
	public ParserRule getLibrariesRule() {
		return getLibrariesAccess().getRule();
	}
	
	///* Comments */
	//Comment:
	//	'//' word+=ID |
	//	'/*' word+=ID '*/';
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	///* Instructions */
	//Instructions:
	//	statement=Statement | iterator=Iterator | rule=Rule | comment=Comment;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//Statement:
	//	text=ID | char=Escaped | string=EscapedString | placeholder=Ph | metaPlaceholder=MetaPh;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Ph:
	//	'[[' property=Property ']]' |
	//	'[[' property=Property metaProperty=MetaProperty ']]';
	public PhElements getPhAccess() {
		return pPh;
	}
	
	public ParserRule getPhRule() {
		return getPhAccess().getRule();
	}
	
	///* Rules */
	//Rule:
	//	'FORALL' '(' element=ID ':' property=Property 'TAGGED' tag=ID ')' '{' body+=Instructions* '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	///* Iterators */
	//Iterator:
	//	'foreach' '(' element=ID 'in' metaElement=MetaPh subProperties+=SubProperty* ')'
	//	'{' body+=Instructions* '}';
	public IteratorElements getIteratorAccess() {
		return pIterator;
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}
	
	///* Placeholder */
	//MetaPh:
	//	'[' property=Property ']' |
	//	'[' property=Property info=TagInfo ']';
	public MetaPhElements getMetaPhAccess() {
		return pMetaPh;
	}
	
	public ParserRule getMetaPhRule() {
		return getMetaPhAccess().getRule();
	}
	
	//TagInfo:
	//	'TAGINFO' tag=STRING;
	public TagInfoElements getTagInfoAccess() {
		return pTagInfo;
	}
	
	public ParserRule getTagInfoRule() {
		return getTagInfoAccess().getRule();
	}
	
	//MetaProperty:
	//	'.{' property=Property '}';
	public MetaPropertyElements getMetaPropertyAccess() {
		return pMetaProperty;
	}
	
	public ParserRule getMetaPropertyRule() {
		return getMetaPropertyAccess().getRule();
	}
	
	///* Properties */
	//Property:
	//	property=ID subProperties+=SubProperty*;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//SubProperty:
	//	'.' property=ID |
	//	'.' property=ID '()';
	public SubPropertyElements getSubPropertyAccess() {
		return pSubProperty;
	}
	
	public ParserRule getSubPropertyRule() {
		return getSubPropertyAccess().getRule();
	}
	
	//EscapedString:
	//	'@{' str=STRING '}@';
	public EscapedStringElements getEscapedStringAccess() {
		return pEscapedString;
	}
	
	public ParserRule getEscapedStringRule() {
		return getEscapedStringAccess().getRule();
	}
	
	//Escaped:
	//	'#' char=('#' | '{' | '}' | '[' | ']' | ',' | ';' | '(' | ')' | ':' | '<' | '>' | "'");
	public EscapedElements getEscapedAccess() {
		return pEscaped;
	}
	
	public ParserRule getEscapedRule() {
		return getEscapedAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
